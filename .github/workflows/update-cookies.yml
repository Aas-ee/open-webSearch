name: Update Cookies

on:
  schedule:
    # 每6小时运行一次
    - cron: '0 */6 * * *'
  workflow_dispatch:
    # 允许手动触发
    inputs:
      urls:
        description: 'URLs to update (comma separated)'
        required: false
        default: ''

jobs:
  update-cookies:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm init -y
          npm install playwright-core @playwright/test

      - name: Install Chromium
        run: npx playwright install chromium

      - name: Create cookie updater script
        run: |
          cat > update-cookies.mjs << 'EOF'
          import { chromium } from 'playwright-core';
          import { writeFileSync } from 'fs';

          async function updateCookies() {
            const urls = process.env.TARGET_URLS ? 
              process.env.TARGET_URLS.split(',').map(url => url.trim()) : 
              (process.env.MANUAL_URLS ? process.env.MANUAL_URLS.split(',').map(url => url.trim()) : []);
          
            if (urls.length === 0) {
              console.log('No URLs provided');
              return;
            }

            const results = {};
            const browser = await chromium.launch({
              headless: true,
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-background-timer-throttling',
                '--disable-backgrounding-occluded-windows',
                '--disable-renderer-backgrounding'
              ]
            });

            for (const url of urls) {
              try {
                console.log(`Processing ${url}...`);
          
                const context = await browser.newContext({
                  userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                  viewport: { width: 1920, height: 1080 },
                  extraHTTPHeaders: {
                    'Accept-Language': 'en-US,en;q=0.9',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
                  }
                });

                // 移除自动化检测
                await context.addInitScript(() => {
                  delete window.webdriver;
                  delete window.chrome;
                  window.navigator.webdriver = undefined;
                });

                const page = await context.newPage();
          
                // 设置更长的超时时间
                page.setDefaultTimeout(30000);
          
                await page.goto(url, { 
                  waitUntil: 'networkidle',
                  timeout: 30000 
                });

                // 等待 Cloudflare 检查完成
                await page.waitForTimeout(10000);

                // 检查是否仍在 Cloudflare 检查页面
                const title = await page.title();
                if (title.includes('Just a moment') || title.includes('Checking')) {
                  console.log(`Still checking for ${url}, waiting longer...`);
                  await page.waitForTimeout(15000);
                }

                const cookies = await context.cookies();
                const domain = new URL(url).hostname;

                results[domain] = {
                  cookies,
                  timestamp: Date.now(),
                  url,
                  userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                };

                console.log(`✓ Got ${cookies.length} cookies for ${domain}`);
                await context.close();

                // 避免请求过快
                await new Promise(resolve => setTimeout(resolve, 2000));

              } catch (error) {
                console.error(`✗ Failed to get cookies for ${url}:`, error.message);
          
                // 即使失败也记录，避免完全丢失数据
                const domain = new URL(url).hostname;
                results[domain] = {
                  error: error.message,
                  timestamp: Date.now(),
                  url
                };
              }
            }

            await browser.close();

            // 输出结果供 GitHub Actions 使用
            console.log('RESULTS:', JSON.stringify(results));
            writeFileSync('cookies-output.json', JSON.stringify(results, null, 2));
          }

          updateCookies().catch(error => {
            console.error('Script failed:', error);
            process.exit(1);
          });
          EOF

      - name: Run cookie updater
        env:
          TARGET_URLS: ${{ secrets.TARGET_URLS }}
          MANUAL_URLS: ${{ github.event.inputs.urls }}
        run: node update-cookies.mjs

      - name: Upload to Gist
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GIST_ID: ${{ secrets.GIST_ID }}
        run: |
          if [ -f cookies-output.json ]; then
            COOKIES_CONTENT=$(cat cookies-output.json)
          
            curl -X PATCH \
              -H "Authorization: token $GH_TOKEN" \
              -H "Content-Type: application/json" \
              "https://api.github.com/gists/$GIST_ID" \
              -d "{
                \"files\": {
                  \"cookies.json\": {
                    \"content\": $(echo "$COOKIES_CONTENT" | jq -R -s .)
                  }
                }
              }"
          
            echo "✓ Cookies uploaded to Gist successfully"
          else
            echo "✗ No cookies file found"
            exit 1
          fi

      - name: Verify upload
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
        run: |
          echo "Gist URL: https://gist.github.com/$GIST_ID"
          echo "Raw URL: https://gist.githubusercontent.com/[username]/$GIST_ID/raw/cookies.json"

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Cookie update failed. Check the logs above for details."
